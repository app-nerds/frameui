const ErrTokenExpired="token expired";class SessionService{static clearMember(){window.sessionStorage.removeItem("member")}static clearToken(){window.sessionStorage.removeItem("token")}static getMember(){return JSON.parse(window.sessionStorage.getItem("member"))}static getToken(){return JSON.parse(window.sessionStorage.getItem("token"))}static hasMember(){return null!==window.sessionStorage.getItem("member")}static hasToken(){return null!==window.sessionStorage.getItem("token")}static navigateOnTokenExpired(e,path,navigateTo){e.message===ErrTokenExpired&&(SessionService.clearToken(),navigateTo(path))}static setMember(member){window.sessionStorage.setItem("member",JSON.stringify(member))}static setToken(token){window.sessionStorage.setItem("token",JSON.stringify(token))}static tokenExpireFunc(httpResponse,path,navigateTo){return httpResponse&&401===httpResponse.status?(SessionService.clearToken(),SessionService.navigateOnTokenExpired({message:ErrTokenExpired},path,navigateTo),!1):!!SessionService.hasToken()||(SessionService.navigateOnTokenExpired({message:ErrTokenExpired},path,navigateTo),!1)}}export{ErrTokenExpired,SessionService as default};