const objectToMap=(o={})=>{let e=new Map;for(const n in o)e.set(n,o[n]);return e},debounce=(fn,delay=400)=>{let n=null;return function(){let e=arguments;clearTimeout(n),n=setTimeout(()=>{fn.apply(this,e)},delay)}};class Binding{constructor(value,selectedIndex=0){this._listeners=[],this._value=value,this._selectedIndex=selectedIndex}notify(){this._listeners.forEach(listener=>listener(this._value,this._selectedIndex))}subscribe(listener){this._listeners.push(listener)}clear(newValue="",newSelectedIndex=0){this._value=newValue,this._selectedIndex=newSelectedIndex,this.notify()}get value(){return this._value}set value(newValue){newValue!==this._value&&(this._value=newValue,this.notify())}get selectedIndex(){return this._selectedIndex}set selectedIndex(newIndex){newIndex!==this._selectedIndex&&(this._selectedIndex=newIndex,this.notify())}}class Computed extends Binding{constructor(value,deps){super(value());const e=()=>{this._value=value(),this.notify()};deps.forEach(dep=>dep.subscribe(e))}get value(){return this._value}set value(_){throw"cannot set value on computed property"}}function applyBindings(container){document.querySelectorAll("[data-bind]").forEach(el=>{var e=container[el.getAttribute("data-bind")];("INPUT"===el.nodeName?bindInput:"SELECT"===el.nodeName?bindSelect:bindNode)(el,e)})}function bindInput(input,observable){input.value=observable.value,observable.subscribe(()=>input.value=observable.value),input.addEventListener("keyup",()=>{observable.value=input.value})}function bindSelect(input,observable){input.selectedIndex=observable.selectedIndex,observable.subscribe(()=>()=>{input.selectedIndex=observable.selectedIndex}),input.addEventListener("change",()=>{observable.selectedIndex=input.selectedIndex,observable.value=input.options[input.selectedIndex].value})}function bindNode(node,observable){node.innerText=observable.value,observable.subscribe(()=>node.innerText=observable.value)}export{Binding,Computed,applyBindings,debounce,objectToMap};