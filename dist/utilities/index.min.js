const objectToMap=(o={})=>{let e=new Map;for(const t in o)e.set(t,o[t]);return e},debounce=(fn,delay=400)=>{let t=null;return function(){let e=arguments;clearTimeout(t),t=setTimeout(()=>{fn.apply(this,e)},delay)}};class Binding{constructor(value){this._listeners=[],this._value=value}notify(){this._listeners.forEach(listener=>listener(this._value))}subscribe(listener){this._listeners.push(listener)}get value(){return this._value}set value(newValue){newValue!==this._value&&(this._value=newValue,this.notify())}}class Computed extends Binding{constructor(value,deps){super(value());const e=()=>{this._value=value(),this.notify()};deps.forEach(dep=>dep.subscribe(e))}get value(){return this._value}set value(_){throw"cannot set value on computed property"}}function applyBindings(container){document.querySelectorAll("[data-bind]").forEach(el=>{var e=container[el.getAttribute("data-bind")];bindValue(el,e)})}function bindValue(input,observable){input.value=observable.value,observable.subscribe(()=>input.value=observable.value),input.addEventListener("keyup",()=>{observable.value=input.value})}export{Binding,Computed,applyBindings,debounce,objectToMap};